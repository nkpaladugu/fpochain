pragma solidity ^0.4.24;

import "../rolemanagement/FarmerRole.sol";
import "../rolemanagement/DistributorRole.sol";
import "../rolemanagement/FpoRole.sol";

contract SupplyChain is FarmerRole, FpoRole, DistributorRole {

  address owner;
  uint  upc; // Universal Product Code (UPC)
  uint  sku; // Stock Keeping Unit (SKU)

  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originFarmerID; // Metamask-Ethereum address of the Farmer
    string  originFarmName; // Farmer Name
    string  originFarmInformation;  // Farmer Information
    string  originFarmLatitude; // Farm Latitude
    string  originFarmLongitude;  // Farm Longitude
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address distributorID;  // Metamask-Ethereum address of the Distributor
    address fpoID; // Metamask-Ethereum address of the Retailer
  }

  // All the various item states through the supply chain
  enum State 
  { 
    Harvested,  // 0
    Processed,  // 1
    Packed,     // 2
    ForSale,    // 3
    Sold,       // 4
    Shipped,    // 5
    Received,   // 6
    Purchased   // 7
  
  }
  State constant defaultState = State.Harvested;

  mapping (uint => Item) items; // maps the UPC to an Item.
  mapping (uint => string[]) itemsHistory; // maps the UPC to an array of TxHash that track its journey through the supply chain
  
  event Harvested(uint upc);
  event Processed(uint upc);
  event Packed(uint upc); 
  event ForSale(uint upc);
  event Sold(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);
  event Purchased(uint upc);


  // Checks that caller is the contract's owner
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  // Verifies the caller's address
  modifier verifyCaller (address _address) {
    require(msg.sender == _address); 
    _;
  }

  // Checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) { 
    require(msg.value >= _price); 
    _;
  }
  
  // Checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_upc].consumerID.transfer(amountToReturn);
  }

  // Checks if an item.state of a upc is Harvested
  modifier harvested(uint _upc) {
    require(items[_upc].itemState == State.Harvested);
    _;
  }

  // Checks if an item.state of a upc is Processed
  modifier processed(uint _upc) {
    require(items[_upc].itemState == State.Processed);
    _;
  }
  
  // Checks if an item.state of a upc is Packed
  modifier packed(uint _upc) {
    require(items[_upc].itemState == State.Packed);
    _;
  }

  // Checks if an item.state of a upc is ForSale
  modifier forSale(uint _upc) {
    require(items[_upc].itemState == State.ForSale);
    _;
  }

  // Checks if an item.state of a upc is Sold
  modifier sold(uint _upc) {
    require(items[_upc].itemState == State.Sold);
    _;
  }
  
  // Checks if an item.state of a upc is Shipped
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Shipped);
    _;
  }

  // Checks if an item.state of a upc is Received
  modifier received(uint _upc) {
    require(items[_upc].itemState == State.Received);
    _;
  }

  // Checks if an item.state of a upc is Purchased
  modifier purchased(uint _upc) {
    require(items[_upc].itemState == State.Purchased);
    _;
  }


  // Initialize the contract's owner and sku/upc values
  constructor() public payable {
    owner = msg.sender;
    sku = 1;
    upc = 1;
  }

  // Kills the contract if necessary
  function kill() public {
    if (msg.sender == owner) {
      selfdestruct(owner);
    }
  }


  function harvestItem(uint _upc, address _originFarmerID, string _originFarmName, string _originFarmInformation, string  _originFarmLatitude, string  _originFarmLongitude, string  _productNotes) public onlyFarmer
  {
    // Add the new item as part of Harvest
    Item memory newItem = Item(
      sku,
      _upc,
      msg.sender,
      _originFarmerID,
      _originFarmName,
      _originFarmInformation,
      _originFarmLatitude,
      _originFarmLongitude,
      _upc + sku,
      _productNotes,
      0,
      defaultState,
      address(0),
      address(0),
      address(0)
    );
    items[_upc] = newItem;
    
    // Increment sku
    sku = sku + 1;

    emit Harvested(_upc);
  }

  function processItem(uint _upc) public harvested(_upc) onlyFarmer {
    items[_upc].itemState = State.Processed;
    
    emit Processed(_upc);
  }

  function packItem(uint _upc) public processed(_upc) onlyFarmer {
    items[_upc].itemState = State.Packed;
    
    emit Packed(_upc);    
  }

  function sellItem(uint _upc, uint _price) public packed(_upc) onlyFarmer {
    items[_upc].itemState = State.ForSale;
    items[_upc].productPrice = _price;
    
    emit ForSale(_upc);
  }

  function buyItem(uint _upc) public payable forSale(_upc) paidEnough(items[_upc].productPrice) checkValue(_upc) onlyDistributor {
    address farmerId = items[_upc].ownerID;

    items[_upc].ownerID = msg.sender;
    items[_upc].distributorID = msg.sender;
    items[_upc].itemState = State.Sold;

    farmerId.transfer(msg.value);

    emit Sold(_upc);
  }

  function shipItem(uint _upc) public sold(_upc) onlyDistributor {
    items[_upc].itemState = State.Shipped;
    
    emit Shipped(_upc);
  }

  function receiveItem(uint _upc) public shipped(_upc) onlyRetailer {
    items[_upc].ownerID = msg.sender;
    items[_upc].retailerID = msg.sender;
    items[_upc].itemState = State.Received;
    
    emit Received(_upc);
  }

  function purchaseItem(uint _upc) public received(_upc) onlyConsumer {
    items[_upc].ownerID = msg.sender;
    items[_upc].consumerID = msg.sender;
    items[_upc].itemState = State.Purchased;
    
    emit Purchased(_upc);
  }

  // Fetch a view of the data
  function fetchItemBufferOne(uint _upc) public view returns 
  (
    uint    itemSKU,
    uint    itemUPC,
    address ownerID,
    address originFarmerID,
    string  originFarmName,
    string  originFarmInformation,
    string  originFarmLatitude,
    string  originFarmLongitude
  ) {
    itemSKU = items[_upc].sku;
    itemUPC = items[_upc].upc;
    ownerID = items[_upc].ownerID;
    originFarmerID = items[_upc].originFarmerID;
    originFarmName = items[_upc].originFarmName;
    originFarmInformation = items[_upc].originFarmInformation;
    originFarmLatitude = items[_upc].originFarmLatitude;
    originFarmLongitude = items[_upc].originFarmLongitude;
  
  return 
  (
    itemSKU,
    itemUPC,
    ownerID,
    originFarmerID,
    originFarmName,
    originFarmInformation,
    originFarmLatitude,
    originFarmLongitude
  );
  }

  // Fetch a view of the data
  function fetchItemBufferTwo(uint _upc) public view returns 
  (
    uint    itemSKU,
    uint    itemUPC,
    uint    productID,
    string  productNotes,
    uint    productPrice,
    uint    itemState,
    address distributorID,
    address retailerID,
    address consumerID
  ) {
    itemSKU = items[_upc].sku;
    itemUPC = items[_upc].upc;
    productID = items[_upc].productID;
    productNotes = items[_upc].productNotes;
    productPrice = items[_upc].productPrice;
    itemState = uint(items[_upc].itemState);
    distributorID = items[_upc].distributorID;
    retailerID = items[_upc].retailerID;
    consumerID = items[_upc].consumerID;
  return 
  (
    itemSKU,
    itemUPC,
    productID,
    productNotes,
    productPrice,
    itemState,
    distributorID,
    retailerID,
    consumerID
  );
  }
}